---
import Layout from './Layout.astro';

const { frontmatter } = Astro.props;

// 読了時間を計算（日本語の平均読了速度: 約350文字/分）
function calculateReadingTime(content: string): number {
	const textWithoutMarkdown = content.replace(/[#*`\[\]]/g, '');
	const charCount = textWithoutMarkdown.length;
	const readingTimeMinutes = Math.ceil(charCount / 350);
	return readingTimeMinutes;
}

const content = await Astro.slots.render('default');
const readingTime = calculateReadingTime(content);
---

<Layout title={frontmatter.title}>
	<div>
		<!-- ヘッダーセクション -->
		<header>
			<div>
				<div>
					<a href="/">
						<svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="16" height="16">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
						</svg>
						ホームへ戻る
					</a>
				</div>
				<h1>{frontmatter.title}</h1>
				{frontmatter.description && (
					<p>{frontmatter.description}</p>
				)}
				<div>
					<time datetime={frontmatter.pubDate}>
						<svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 002 2z" />
						</svg>
						{new Date(frontmatter.pubDate).toLocaleDateString('ja-JP', {
							year: 'numeric',
							month: 'long',
							day: 'numeric'
						})}
					</time>
					<span>
						<svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
						</svg>
						{frontmatter.author}
					</span>
					<span>
						<svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
						</svg>
						約{readingTime}分で読めます
					</span>
				</div>
				{frontmatter.tags && (
					<div>
						{frontmatter.tags.map((tag) => (
							<span>
								#{tag}
							</span>
						))}
					</div>
				)}
			</div>
		</header>

		<!-- メインコンテンツ -->
		<main>
			<article>
				<div>
					<slot />
				</div>
			</article>
		</main>
	</div>
</Layout>

<script>
	// コードブロックにコピーボタンを追加
	document.addEventListener('DOMContentLoaded', () => {
		const codeBlocks = document.querySelectorAll('pre');
		
		codeBlocks.forEach((pre) => {
			// コピーボタンを作成
			const copyButton = document.createElement('button');
			copyButton.textContent = 'Copy';
			
			// pre要素を相対位置に設定
			pre.style.position = 'relative';
			
			// コピー機能
			copyButton.addEventListener('click', async () => {
				const code = pre.textContent || '';
				try {
					await navigator.clipboard.writeText(code);
					copyButton.textContent = 'Copied!';
					
					setTimeout(() => {
						copyButton.textContent = 'Copy';
					}, 2000);
				} catch (err) {
					console.error('Failed to copy: ', err);
				}
			});
			
			pre.appendChild(copyButton);
		});
	});
</script>